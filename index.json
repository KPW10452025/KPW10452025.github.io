[{"categories":["JavaScript課程"],"contents":"  attribute 屬性 execute 執行 practical application 實際應用 maintenance 維護 couple 偶合 quote 引用 caching mechanism 緩存機制    We can code the JS in the attributes of onclick.\nJS code will be executed when we clicking the button on the website.  \u0026lt;body\u0026gt; \u0026lt;button onclick=\u0026#34;alert(\u0026#39;Hello there!\u0026#39;)\u0026#34;\u0026gt;Click me!\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; We can also code the JS in the a tag.\nJS code will be executed when we clicking the hyperlink.  \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;javascript:alert(\u0026#39;Look over there!\u0026#39;)\u0026#34;\u0026gt;Click me!\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; Here is a practical application for JS in a hyperlink.\nWhen we code an a tag and we don\u0026rsquo;t want it to connect any urls, we can use 【 javascript:; 】.  \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt;Click me!\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; Although JS can be written in attributes, it is easy to couple attributes with structures.\nBecause maintenance is difficult, we don\u0026rsquo;t recommend.\nBy using the script tag to code JS in head tag is better than on the attributes.  \u0026lt;head\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; alert(\u0026#34;This is an alert!\u0026#34;) \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; The best way to code JS is creating a .js file.\nAnd using script tags and src in .html file to link the .js file.\nThe benefits of writing JS code in the .js file is we can quote this file to different .html file. In this way, we can also take advantage of the browser\u0026rsquo;s caching mechanism.  \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;/example.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt;  ","permalink":"https://KPW10452025.github.io/blog/js003/","tags":["javascript"],"title":"JS 課程003 JS 代碼編寫位置"},{"categories":["JavaScript課程"],"contents":"\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;JS002\u0026lt;/title\u0026gt; \u0026lt;!-- JS 代碼需要邊寫道 script 標籤中 --\u0026gt; \u0026lt;!-- type=\u0026#34;text/javascript\u0026#34; 是默認值，寫不寫皆可 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; // 控制瀏覽器彈出一個警告  // alert(\u0026#34;This is my first JS code!\u0026#34;);  // alert()可以讓瀏覽器頁面彈出一個警告視窗  // 在右面中輸出一個內容  // document.write(\u0026#34;Hello World!\u0026#34;);  // document.write()可以向 body 輸出一個內容  // 像控制台日誌輸出一個內容  // console.log(\u0026#34;Hello World!\u0026#34;);  // console.log()可以向控制台輸出一個內容  // 控制台日誌在 檢查頁面（command + shift + C）的 console 選項裡面  alert(\u0026#34;This is my first JS code!\u0026#34;); document.write(\u0026#34;Hello World in web page!\u0026#34;); console.log(\u0026#34;Hello World in console log!\u0026#34;) // JS 語言運作是由上而下，所以上面三個指令也會依序作用  // 當頁面刷新時，在還沒點確定以關閉警告頁面時，Hello World in web page! 是不會出現的  // alert, document.write console.log 稱為「輸出語句」  // 「輸出語句」：類似 Python 中的 print() 可以用來做測試  \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  ","permalink":"https://KPW10452025.github.io/blog/js002/","tags":["javascript"],"title":"JS 課程002 JS HelloWord"},{"categories":["JavaScript課程"],"contents":" ECMAScript 是 JavaScript 標準，所以一般情況下這兩個詞是同一個意思。 但實際上 JavaScript 的含義要更大一些。 完整的 JavaScript 實現應該由以下三個部分構成：\n一、ECMAScript\n二、DOM 文檔對象模型：它提供一組對象，讓我們可以通過 JS 操作網頁。\n三、BOM 瀏覽器對象模型：它提供一組對象，讓我們可以通過 JS 操作瀏覽器。 JS 的特點：\n一、解釋型語言\n二、類似 和 的語法結構\n三、動態語言\n四、基於圓形的物件導向（面向對象）  ","permalink":"https://KPW10452025.github.io/blog/js001/","tags":["javascript"],"title":"JS 課程001 JavaScript 簡介"},{"categories":["大前端相關"],"contents":"  步驟一：開啟網頁「檢查」頁面\n windows 系統：\n按下 F12 開啟檢查頁面 MacOS 系統：\n按下 ⌘Command + Option + C    步驟二：開啟搜尋匡\n windows 系統：\n在檢查頁面，按下 CTRL + Shift + P MacOS 系統：\n在檢查頁面，按下 ⌘Command + Shift + P    步驟三：輸入 Capture Full Size Screenshot\n 輸入後按下 Enter 稍等片刻會彈出存儲視窗     ","permalink":"https://KPW10452025.github.io/blog/00webpage_full_screen_shot/","tags":["html"],"title":"擷取網站全畫面"},{"categories":["terminal語法相關"],"contents":"Here is some common used syntax in terminal on MacOS.   Create a new folder.\n創建新資料夾  mkdir folder_name   Delete a file. (This deletes the file permanently; use with caution.)\n刪除檔案  rm file_name   Delete a folder and its contents.\n刪除資料夾及其內容檔案  rm -R folder_name   Create a new file without any extension.\n創建一個新檔案  touch file_name   Display the name of files and subdirectories in the directory.\n顯示資料夾中所有檔案  ls   List detailed directory contents, including hidden files\n顯示資料夾中所有檔案（包含隱藏檔案）  ls -la   Clear the line before the cursor.\n清除光標前面已輸入的內容\nCtrl + U Clear the screen.\n清空頁面\nCtrl + L Kill whatever you\u0026rsquo;re running\n強制結束任何運行中的程式\nCtrl + C  ","permalink":"https://KPW10452025.github.io/blog/00mac_terminal_commands_cheat_sheet/","tags":["terminal"],"title":"MacOS 的 terminal 常用語法"},{"categories":["Git相關"],"contents":"「基本常用 Code」  git init 將一個資料夾初始化後，可以開始使用 git 版本管理 git log 查看先前詳細的 commit 記錄。 git log \u0026ndash;oneline 查看先前簡易的 commit 記錄。 git log \u0026ndash;graph 查看先前詳細的 commit 記錄，視覺化分支。 git reflog 查看全部的 commit 記錄，包含跳版本的紀錄。（reference 參考） git status 檢查本地端檔案異動狀態。 git status -s 檢查本地端檔案異動狀態。（簡易顯示） git add [檔案或資料夾] 將指定的檔案或資料夾，加入版本控制。 git add . 將全部的檔案或資料夾，加入版本控制。 git commit 提交（commit）目前的異動。  會進入提交頁面。 按 s 鍵，進入INSERT狀態，並輸入將要提交的文字備註內容。 輸入完備註內容後按 esc (鍵盤左上角)，退出編輯狀態，然後輸入 :wq (一定要先輸入冒號)。   git commit -m \u0026ldquo;提交說明內容\u0026rdquo; 提交（commit）目前的異動並透過 -m 參數設定摘要說明文字。 git add [檔案或資料夾] git commit \u0026ndash;amend \u0026ndash;no-edit 在不增加新 commit 版本的狀態下，把新的異動加到目前最新的版本中。 但是 commit 的 ID 會改變。 git reset [檔案或資料夾] 把檔案或資料夾從 staged 狀態返回 modified 狀態。 git reset \u0026ndash;hard head 把版本移動到 head 版本裡（最新版）   「回到過去版本」  git reset \u0026ndash;hard head~1 git reset \u0026ndash;hard head^ 把該資料夾所有的檔案版本，移動到上一個版 git reset \u0026ndash;hard head~2 git reset \u0026ndash;hard head^^ 把該資料夾所有的檔案版本，移動到上兩個版 git reset \u0026ndash;hard [版本號碼] 把該資料夾所有的檔案版本，直接回到指定編號的版本   「回到未來版本」 通常會用到 git reflog 查詢 commit ID 然後用 git reset \u0026ndash;hard [版本號碼] 到達該版本 或是 git reset \u0026ndash;hard head@{數字} 到達該版本 「將『單個』檔案或資料夾，做版本變更」 git checkout [版本編號] \u0026ndash; [檔案或資料夾]\n 「建立分支」  git branch 查看目前所有的分支。 查看目前指針所處位置。 git branch [新分支名稱] 建立新分支。此時枝針並沒有移動該分支。 git checkout [已存在分支名稱] 將指針移動到該分支。 git checkout -b [新分支名稱] 建立新分支。並將指針移動到新分支。 git checkout master 將指針移動到 master。   「刪除分支」  git branch -d [分支名稱] 刪除該分支。 附註，當指針處於欲刪除的分支上時，系統會顯示無法刪除。   「主分合併」  git merge \u0026ndash;no-ff -m \u0026ldquo;提交說明內容\u0026rdquo; [分支名稱] 將當前分支與稱作[分支名稱]的分支代碼合並（[分支名稱]代碼合並到當前分支），並且顯示合並細節，具體表現在提交線路圖會出現交叉線。 git merge [分支名稱] 將當前分支與稱作[分支名稱]的分支代碼合並（[分支名稱]代碼合並到當前分支）。   「合併衝突」  conflict 衝突 當合併出現衝突時，系統會出現： CONFLICT (content): Merge conflict in [檔案或資料夾名稱] Automatic merge failed; fix conflicts and then commit the result. 此時系統會在被合併檔案出現許多提示文字要使用者做修改。 修改完後打上指令： git commit -am \u0026ldquo;提交說明內容\u0026rdquo; 即可排除衝突並合併  ","permalink":"https://KPW10452025.github.io/blog/00git_code/","tags":["git"],"title":"Git 版本控制常用語法"},{"categories":["Python相關"],"contents":"虛擬環境可以在任何資料夾下建立，並且同一個資料夾可以建立多個虛擬環境。  [ 建立虛擬環境 ]\n把 terminal 位置 cd 到想建立虛擬環境的專案資料夾。\n在 terminal 輸入 virtualenv 虛擬環境名稱。\nvirtualenv testvenv 這樣會建立一個名為 testvenv 的虛擬環境。\n專案資料夾會出現一個 testvenv 的資料夾。\n [ 啟動虛擬環境 ]\n在 terminal 輸入 source 虛擬環境名稱/bin/activate\nsource testvenv/bin/activate 這樣會啟動方才建立的 testvenv 虛擬環境。\n [ 關閉虛擬環境 ]\n在 terminal 輸入 deactivate\ndeactivate  [ 刪除虛擬環境 ]\n在專案資料夾裡找到和虛擬環境依樣名稱的資料夾，刪除這個資料夾就能刪除此虛擬環境。\n本篇的說明例子就是刪除名為 testvenv 的資料夾即可。\n [ 導出安裝模組 model ]\n在 terminal 輸入 pip list 可以看目前的環境已安裝的模組。\n在 terminal 輸入 pip freeze \u0026gt; 檔案名稱.txt 可以把目前的環境已安裝的模組導出至此 txt 檔案。\npip freeze \u0026gt; requirements.txt 在 terminal 輸入 cat 導出檔案名稱.txt 可以觀看此 txt 黨的內容。\ncat requirements.txt  [ 導入安裝模組 ]\n啟動虛擬環境後，在 terminal 輸入 pip install -r 檔案名稱.txt\npip install -r requirements.txt ","permalink":"https://KPW10452025.github.io/blog/00python_virtualenv/","tags":["python","virtualenv"],"title":"Python 虛擬環境 virtualenv"},{"categories":["大前端相關"],"contents":"   前端核心基礎階段\n 網頁頁面技術：HTML 網頁頁面技術：CSS 網頁交互技術：JavaScript 網頁交互技術：Dom 網頁交互技術：Bom   前端核心高級階段\n 網頁介面新技術：HTML5(語意化標籤、本地儲存、音頻視頻等) 網頁介面技術：CSS3(過度、動畫等) 移動端開發：移動端特性、適配等 前端樣式庫：Bootstrap 前端繪圖技術：Canvas 快速簡介圖表可視化庫：Echarts(折線圖、長條圖、餅狀圖、組合圖、綜合圖) 流行圖表可視化庫：D3 使用JS函數庫：JQuery 移動端類JQuery庫：Zepto 版本控制工具1：VSN 版本控制工具2：GIT \u0026amp; GITHUB   ＪＳ高級\n JS作用域及作用域鏈 JS原型及原型鏈 JS閉包 JS異步、事件循環機制 JS繼承 節流、防抖 深層複製、淺層複製 ES6新特性 ES7新特性 ES8~ES11新特性   ＪＳ後台技術階段\n 強大的後臺JS：Node.js 高效的非關係行數據庫：MongoDB 簡潔的MongoDB操作者Mongoose 後台Web開發框架1：Express 後台Web開發框架2：Koa 後台模板引琴：EJS 即時通信聊天庫：Socket.io 網路通信協議：http、https 通信數據加密：MD5、jsonwebtoken、base64   前後端交互階段\n AJAX 新型AJAX請求方式：fetch 前後台AJAX請求庫：axios REST API 跨域全面解決方案 Mock後台數據庫接口：Mock.js、EasyMock 接口調適神器：PostMan 基於promise封包原生AJAX axios源碼分析 基於promise現實axios封裝及二次迭代   工程化階段\n 模塊化規範1：Comman.js 模塊化規範2：ES6 模塊化規範3：AMD 模塊化規範4：CMD 構建工具1：Grunt 構建工具2：Gulp 構建工具3：Webpack4 構建工具4：Webpack5新特性   前端新型WEB框架階段\n Google出品MVVM庫：Angular Facebook出品組建化庫：React React路由插件庫：React-Router React應用狀態管理庫：Redux React PC端UI組建庫：Ant Design React移動端UI組建庫：Antd-Mobile React服務器端渲染技術 React實戰項目：矽谷登入系統 MVVM庫：Vue Vue路由庫：Vue-Router Vue狀態管理庫：Vuex Vue PC端UI組建庫：Element-UI Vue移動端UI組建庫：Vant-UI Vue服務器渲染端 Vue實戰項目：矽谷商城 Vue實戰項目：矽谷後台管理系統 項目部署上線：雲端服務器部署 Nginx附載均衡、反向代理 Vue+Echars圖表 Vue+Ts項目   跨平台開發階段\n 微信小程序開發 微信小程序框架：mpvue 微信小程序框架：UniApp 微信小程序項目：矽谷書城項目、矽谷週刊 微信小程序項目：矽谷雲音樂 微信公眾號開發 跨平台移動應用開發框架：React Native 跨平台開發框架：MUI H5 Hybrid移動端混合開發框架：ionic   底層原理實現\n 自定義promise 自定義axios 自定義PubSub 自定義Eventbus 自定義React、Vue聯手架 自定義實現lodash方法  ","permalink":"https://KPW10452025.github.io/blog/00frond_end_learning/","tags":["html","css","javascript"],"title":"大前端學習"}]