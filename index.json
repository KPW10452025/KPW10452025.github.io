[{"categories":["JavaScript課程"],"contents":"賦值運算符\n 等號 = 可以將符號右側的值賦值給等號左邊的變量  var a = 10; console.log(\u0026#34;a =\u0026#34;, a) // a = 10  加等於 +=  a += b 等價於 a = a + b\nvar a = 10; a += 1 console.log(\u0026#34;a =\u0026#34;, a) // a = 11  減等於 -=  a -= b 等價於 a = a - b\nvar a = 10; a -= 1 console.log(\u0026#34;a =\u0026#34;, a) // a = 9  乘等於 *=  a *= b 等價於 a = a * b\nvar a = 10; a *= 2 console.log(\u0026#34;a =\u0026#34;, a) // a = 20  除等於 /=  a /= b 等價於 a = a / b\nvar a = 10; a /= 5 console.log(\u0026#34;a =\u0026#34;, a) // a = 2  模等於 %=  a %= b 等價於 a = a % b\nvar a = 10; a %= 7 console.log(\u0026#34;a =\u0026#34;, a) // a = 3  ","permalink":"https://KPW10452025.github.io/blog/js021/","tags":["javascript"],"title":"JS 課程021 賦值運算符"},{"categories":["JavaScript課程"],"contents":"對非布林值進行「與」\u0026amp;\u0026amp; 及「或」|| 運算時\n系統會先將其轉會為布林值後再進行運算，在返回原值\n  true \u0026amp;\u0026amp; true  若兩個值經轉換後都為 true 則會返回後者\nvar a = 1 \u0026amp;\u0026amp; 2; console.log(typeof a); // number console.log(a); // 2  true \u0026amp;\u0026amp; false false \u0026amp;\u0026amp; true false \u0026amp;\u0026amp; false  若兩個值中有出現 false 則會返回第一個 false\nvar a = 3 \u0026amp;\u0026amp; -8; console.log(typeof a); // number console.log(a); // -8  var a = 3 \u0026amp;\u0026amp; 0; console.log(typeof a); // number console.log(a); // 0  var a = 0 \u0026amp;\u0026amp; 3; console.log(typeof a); // number console.log(a); // 0  var a = 0 \u0026amp;\u0026amp; 0; console.log(typeof a); // number console.log(a); // 0  var a = NaN \u0026amp;\u0026amp; 0; console.log(typeof a); // number console.log(a); // NaN  var a = 0 \u0026amp;\u0026amp; NaN; console.log(typeof a); // number console.log(a); // 0   true || true true || false false || true  若兩個值中有出現 true 則會返回第一個 true\nvar a = 3 || -8; console.log(typeof a); // number console.log(a); // 3  var a = 3 || 0; console.log(typeof a); // number console.log(a); // 3  var a = 0 || 3; console.log(typeof a); // number console.log(a); // 3  var a = NaN || 5; console.log(typeof a); // number console.log(a); // 5  var a = 6 || NaN; console.log(typeof a); // number console.log(a); // 6   false || false  若兩個值經轉換後都為 false 則會返回後者\nvar a = 0 || NaN; console.log(typeof a); // number console.log(a); // NaN  var a = NaN || 0; console.log(typeof a); // number console.log(a); // 0  ","permalink":"https://KPW10452025.github.io/blog/js020/","tags":["javascript"],"title":"JS 課程020 非布林值的「與」\u0026\u0026 及「或」||"},{"categories":["JavaScript課程"],"contents":"邏輯運算符：通常都用在布林值 Boolean 的判斷\n ! 非 \u0026amp;\u0026amp; 與 || 或    ! 非  var a = true; a = !a; console.log(a); // false  var a = false; a = !a; console.log(a); // true  var a = true; a = !!a; console.log(a); // true 亦可在數字上做運用\nvar b = 10; b = !b; console.log(typeof b); // boolean console.log(b); // false  var b = 0; b = !b; console.log(typeof b); // boolean console.log(b); // true 由上述可發現，數字 Number 經由非 ! 運算後，會轉換成布林值 Boolean\nvar b = 1 b = !!b; console.log(typeof b); // boolean console.log(b); // true  var b = 0; b = !!b; console.log(typeof b); // boolean console.log(b); // false !! 的效果同等於 Boolean() 函數\n!! 為「隱式」轉換，能將任意類型轉換為布林值\n  \u0026amp;\u0026amp; 與  可以對符號兩側的值進行「與」運算並返回結果\nvar a = true \u0026amp;\u0026amp; true; console.log(a); // true  var a = true \u0026amp;\u0026amp; false; console.log(a); // false  var a = false \u0026amp;\u0026amp; true; console.log(a); // false  var a = false \u0026amp;\u0026amp; false; console.log(a); // false   || 或  可以對符號兩側的值進行「或」運算並返回結果\nvar a = true || true; console.log(a); // true  var a = true || false; console.log(a); // true  var a = false || true; console.log(a); // true  var a = false || false; console.log(a); // false  ","permalink":"https://KPW10452025.github.io/blog/js019/","tags":["javascript"],"title":"JS 課程019 邏輯運算符"},{"categories":["JavaScript課程"],"contents":"題目\nvar n1 = 10, n2 = 20; var n = n1++; console.log(\u0026#34;n =\u0026#34;, +n); console.log(\u0026#34;n1 =\u0026#34;, +n1); n = ++n1; console.log(\u0026#34;n =\u0026#34;, +n); console.log(\u0026#34;n1 =\u0026#34;, +n1); n = n2--; console.log(\u0026#34;n =\u0026#34;, +n); console.log(\u0026#34;n2 =\u0026#34;, +n2); n = --n2; console.log(\u0026#34;n=\u0026#34;, +n); console.log(\u0026#34;n2 =\u0026#34;, n2);  答案\nvar n1 = 10, n2 = 20; var n = n1++; console.log(\u0026#34;n =\u0026#34;, +n); // n = 10 console.log(\u0026#34;n1 =\u0026#34;, +n1); // n1 = 11  n = ++n1; console.log(\u0026#34;n =\u0026#34;, +n); // n = 12 console.log(\u0026#34;n1 =\u0026#34;, +n1); // n1 = 12  n = n2--; console.log(\u0026#34;n =\u0026#34;, +n); // n = 20 console.log(\u0026#34;n2 =\u0026#34;, +n2); // n2 = 19  n = --n2; console.log(\u0026#34;n=\u0026#34;, +n); // n = 18 console.log(\u0026#34;n2 =\u0026#34;, n2); // n2 = 18  ","permalink":"https://KPW10452025.github.io/blog/js018/","tags":["javascript"],"title":"JS 課程018 自增與自減之練習題"},{"categories":["JavaScript課程"],"contents":"本篇要介紹的是，自增 ++ 與自減 \u0026ndash;\n 自增 ++  通過自增可以使變量在自身的基礎上增加 1\n對一個變量自增以後，原變量的值會立即自增 1\nvar a = 1; a = a + 1; console.log(\u0026#34;a =\u0026#34;, a) // a = 2 自增分成兩種：變數++ 與 ++變數，舉例：a++ 與 ++a\n無論是 a++ 還是 ++a 都會使原變量的值自增 1\nvar a = 1; a++; console.log(\u0026#34;a =\u0026#34;, a) // a = 2  var a = 1; ++a; console.log(\u0026#34;a =\u0026#34;, a) // a = 2 注意：a++ 與 ++a 所代表的值是不同的\na++ 表示自增前的值\n++a 表示自增後的值\nvar a = 3; console.log(\u0026#34;a++ =\u0026#34;, a++) // a++ = 3 console.log(\u0026#34;a =\u0026#34;, a) // a = 4  var a = 3; console.log(\u0026#34;++a =\u0026#34;, ++a) // ++a = 4 console.log(\u0026#34;a =\u0026#34;, a) // a = 4  var a = 20; var result = a++ + ++a + a; console.log(\u0026#34;result =\u0026#34;, result); // result = 64 // 20 + 22 + 22  var a = 30; a = a++ console.log(\u0026#34;a =\u0026#34;, a) // 30  var a = 30; a = ++a console.log(\u0026#34;a =\u0026#34;, a) // 31   自減 --  通過自減可以使變量在自身的基礎上減 1\n自減也分兩種：變數-- 與 --變數，舉例：b-- 與 --b\n無論是b-- 或 --b 都會使原變量自減 1\nvar b = 10; b-- console.log(\u0026#34;b =\u0026#34;, b) //b = 9  var b = 10; --b console.log(\u0026#34;b =\u0026#34;, b) //b = 9 注意：b-- 與 --b 所代表的值是不同的\nb-- 表示自減前的值\n--b 表示自減後的值\nvar b = 3; console.log(\u0026#34;b-- =\u0026#34;, b--) // b-- = 3 console.log(\u0026#34;b =\u0026#34;, b) // b = 2  var b = 3; console.log(\u0026#34;--b =\u0026#34;, --b) // --b = 2 console.log(\u0026#34;b =\u0026#34;, b) // a = 2  var b = 20; var result = b-- + --b + b; console.log(\u0026#34;result =\u0026#34;, result); // result = 56 // 20 + 18 + 18  ","permalink":"https://KPW10452025.github.io/blog/js017/","tags":["javascript"],"title":"JS 課程017 自增與自減"},{"categories":["JavaScript課程"],"contents":"本篇要介紹的是，一元運算符之簡介\n何謂運算符？\n運算符：亦可稱作操作符，可對一個或多個值進行運算\n而一元運算符，及為只需要一個值就能操作的運算符\n 正值 +    不會對數字產生影響\n  但可以對數字以外的類型，使用 + 號，將其轉換為數字 Number\n  其原理和 Number() 函數一樣\n  為「隱式」轉換\n   負值 -  會對數字進行正負符號取反\n  負值 - 之運用  var a = 1; a = - a; console.log(\u0026#34;a =\u0026#34;, a) // a = -1  var a = -2; a = - a; console.log(\u0026#34;a =\u0026#34;, a) // a = 2  var a = true; a = - a; console.log(typeof a) // number console.log(\u0026#34;a =\u0026#34;, a) // a = -1  var a = \u0026#34;apple\u0026#34; a = - a; console.log(typeof a) // number console.log(\u0026#34;a =\u0026#34;, a) // a = NaN  var a = \u0026#34;123\u0026#34; a = - a; console.log(typeof a) // number console.log(\u0026#34;a =\u0026#34;, a) // a = -123  正值 + 之運用  var a = 3; a = + a; console.log(\u0026#34;a =\u0026#34;, a) // a = 3  var a = -4; a = + a; console.log(\u0026#34;a =\u0026#34;, a) // a = -4  var a = \u0026#34;123\u0026#34; a = + a; console.log(typeof a) // number console.log(\u0026#34;a =\u0026#34;, a) // a = 123  var a = 1 + \u0026#34;2\u0026#34; + 3; console.log(typeof a) // string console.log(\u0026#34;a =\u0026#34;, a) // a = 123  var a = 1 + +\u0026#34;2\u0026#34; + 3; console.log(typeof a) // number console.log(\u0026#34;a =\u0026#34;, a) // a = 6  ","permalink":"https://KPW10452025.github.io/blog/js016/","tags":["javascript"],"title":"JS 課程016 一元運算符"},{"categories":["JavaScript課程"],"contents":"本篇要介紹的是，各種常用算數運算符在 JS 中的效果\n何謂運算符？\n運算符：亦可稱作操作符，可對一個或多個值進行運算\n前面課程提到的 typeof 就是一個運算符\nvar a = 123; var result = typeof a; console.log(result); // number console.log(typeof result); // string 由此可知，typeof 的返回值是字符串  算術運算符 + - * / %\n 加法  當使用算術運算符對非數字的值進行運算時，會自動將這些值轉換為數字再進行運算\nvar a = 10; var result = a + 2; console.log(result); // 12  var result = true + 1; console.log(result); // 2 // true = 1  var result = true +false; console.log(result); // 1 // false = 0  var result = 3 + null console.log(result); // 3 // null = 0  var result = 123 + NaN; console.log(result); // NaN // 任何值與 NaN 進行運算都會得到 NaN 任何值與字符串做 + 運算，都會先轉換成字符串後拼接\nvar result = \u0026#34;123\u0026#34; + \u0026#34;456\u0026#34;; console.log(result); // 123456  var result = \u0026#34;123\u0026#34; + 123 console.log(result); // 123123  var result = \u0026#34;號碼\u0026#34; + 123; console.log(result); // 號碼123  var result = \u0026#34;號碼\u0026#34; + true; console.log(result); // 號碼true  var result = \u0026#34;號碼\u0026#34; + NaN; console.log(result); // 號碼NaN // 結果並不是 NaN 可以運用此特性，將任意類型數據轉換為字符串 String\nvar result = 333; result = result + \u0026#34;\u0026#34;; console.log(typeof result); // string console.log(result); // 333 這是一種「隱式」的類型轉換\n實際上，系統有自動調用 String() 函數\nresult = result + \u0026quot;\u0026quot;\nresult = String(result) 以上兩者本質一樣，但「隱式」轉換會表示的更簡單一些\n 減法  除了 NaN 與 undefined 以外，都會強制轉換為數字後運算\nvar c = 100 - 1; console.log(c); // 99  var c = 100 - \u0026#34;3\u0026#34;; console.log(c); // 97  var c = 100 - true; console.log(c); // 99  var c = 200 - false; console.log(c); // 200  var c = 100 - NaN; console.log(c); // NaN  var c = 100 - undefined; console.log(c); // NaN  var c = \u0026#34;100\u0026#34; - \u0026#34;3\u0026#34;; console.log(c); // 97  var c = \u0026#34;100\u0026#34; - true; console.log(c); // 99  var c = true - \u0026#34;3\u0026#34;; console.log(c); // -3  var c = \u0026#34;100\u0026#34; - \u0026#34;apple\u0026#34;; console.log(c); // NaN  乘法  除了 NaN 與 undefined 以外，都會強制轉換為數字後運算\nvar c = 100 * 3; console.log(c); // 300  var c = 100 * \u0026#34;3\u0026#34;; console.log(c); // 300  var c = 100 * false; console.log(c); // 0  var c = 100 * NaN; console.log(c); // NaN  var c = 100 * undefined; console.log(c); // NaN  var c = \u0026#34;apple\u0026#34; * true; console.log(c) // NaN  var c = \u0026#34;apple\u0026#34; * 3; console.log(c) // NaN  除法  除了 NaN 與 undefined 以外，都會強制轉換為數字後運算\nvar c = 20 / 5; console.log(c); // 4  var c = 20 / \u0026#34;5\u0026#34;; console.log(c); // 4  var c = 20 / true; console.log(c); // 20  var c = 20 / NaN; console.log(c); // NaN  var c = 20 / undefined; console.log(c); // NaN  由上面所有的例子可以發現 - * / 都會強制轉換成數字 number 進行運算\n可以運用此特性，將任意類型數據轉換為數字 number\n原理和 Number() 函數一樣，為「隱式」類型轉換\nar c = \u0026#34;123\u0026#34; - 0; console.log(typeof c); // number console.log(c); // 123  var c = \u0026#34;123\u0026#34; * 1; console.log(typeof c); // number console.log(c); // 123  var c = \u0026#34;123\u0026#34; / 1; console.log(typeof c); // number console.log(c); // 123   取模運算 modulus  var c = 9 % 3; console.log(c); // 0  var c = 9 % 5; console.log(c); // 4  var c = 9 % true; console.log(c); // 0  var c = 9 % \u0026#34;6\u0026#34;; console.log(c); // 3  ","permalink":"https://KPW10452025.github.io/blog/js015/","tags":["javascript"],"title":"JS 課程015 算數運算符"},{"categories":["JavaScript課程"],"contents":"本篇要介紹的是，將其他的數據類型轉會為布林值 Boolean\n若將其他的數據類型，轉化為布林值 Boolean\n則會使用函數：Boolean()\n其各類型轉換特性如下：\n 將 Number 轉換為 Boolean: 除了 0 和 NaN 為 false，其他皆為 true 將 String 轉換為 Boolean: 除了完全沒字符時為 false，其他皆為 true（空格也算字符） 將 Null 轉換為 Boolean: 一定是 false 將 Undefined 轉換為 Boolean: 一定是 false 特別補充：將 Object 轉換為 Boolean: 一定是 true    將 Number 轉換為 Boolean:  var a = 123; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // true  var a = -123; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // true  var a = 0; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // false  var a = Infinity; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // true  var a = NaN; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // false  將 String 轉換為 Boolean:  var a = \u0026#34;apple\u0026#34;; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // true  var a = \u0026#34;123\u0026#34; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // true  var a = \u0026#34;true\u0026#34; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // true  var a = \u0026#34;false\u0026#34; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // true  var a = \u0026#34;\u0026#34; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // false  var a = \u0026#34; \u0026#34; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // true  將 Null 轉換為 Boolean:  var a = null; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // false  將 Undefined 轉換為 Boolean:  var a = undefined; a = Boolean(a); console.log(typeof a); // boolean console.log(a); // false  ","permalink":"https://KPW10452025.github.io/blog/js014/","tags":["javascript"],"title":"JS 課程014 強制類型轉換之 Boolean()函數"},{"categories":["JavaScript課程"],"contents":"本篇要介紹的是，JS 如果碰到各種進制問題時，要怎麼表示\n 16 進位法：在 js 中，如果需要表示 16 進位的數字，則須以 0x 開頭  var a = 0x10; console.log(a); // 16 var a = 0xff; console.log(a); // 255  8 進位法：在 js 中，如果需要表示 8 進位的數字，則須以 0 開頭  var a = 070; console.log(a); // 56  2 進位法：在 js 中，如果需要表示 2 進位的數字，則須以 0b 開頭（但不是所有瀏覽器都支持）  var a = 0b111; console.log(a); // 7   進位法中須注意問題：  var a = \u0026#34;070\u0026#34;; a = parseInt(a); console.log(typeof a); // number console.log(a); // 70 or 56 有些瀏覽器會解析出 70 有些卻會解析出 56\n為了解決以上狀況，加入新參數 parseInt(a, 進位法)\n加入進位法後就能強制統一轉換方法\nvar a = \u0026#34;070\u0026#34;; a = parseInt(a, 10); // 強制為 10 進位法 console.log(typeof a); // number console.log(a); // 70  var a = \u0026#34;070\u0026#34;; a = parseInt(a, 8); // 強制為 8 進位法 console.log(typeof a); // number console.log(a); // 56  ","permalink":"https://KPW10452025.github.io/blog/js013/","tags":["javascript"],"title":"JS 課程013 JS 中的數字進位問題"},{"categories":["JavaScript課程"],"contents":"本篇要介紹的是，將其他的數據類型轉會為數字 Number\n其方法只有一種：\n Number() 函數  注意！！！：並不存在 toNumber() 方法！！！\n特別介紹：parseInt() 函數、parseFloat() 函數   Number()函數\n Number(字符串)：\n如果是純數字的字符串，則直接將其轉換為數字\n如果字符串中非數字內容，則轉換為 NaN\n如果字符串中沒有字符或是空格，則會轉換為 0 Number(布林值)：\n如果是 true，則轉換為 1\n如果是 false，則轉換為 0 Number(空值)：會轉換為 0 Number(未定義)：會轉換為 NaN    字符串轉數字  var a = \u0026#34;123\u0026#34; console.log(typeof a); // string console.log(a); // 123 a = Number(a); console.log(typeof a); // number 轉換成功 console.log(a); // 123  var a = \u0026#34;apple\u0026#34; console.log(typeof a); // string console.log(a); // apple a = Number(a); console.log(typeof a); // number 轉換成功 console.log(a); // NaN 非數字內容，轉換為 NaN  var a = \u0026#34;\u0026#34; console.log(typeof a); // string console.log(a); // a = Number(a); console.log(typeof a); // number 轉換成功 console.log(a); // 0 沒有字符，轉換為 0  var a = \u0026#34; \u0026#34; console.log(typeof a); // string console.log(a); // a = Number(a); console.log(typeof a); // number 轉換成功 console.log(a); // 0 空格，轉換為 0 布林值轉數字  var a = true; console.log(typeof a); // boolean console.log(a); // true a = Number(a); console.log(typeof a); // number console.log(a); // 1  var a = false; console.log(typeof a); // boolean console.log(a); // false a = Number(a); console.log(typeof a); // number console.log(a); // 0 空值轉數字  var a = null; console.log(typeof a); // object console.log(a); // null a = Number(a); console.log(typeof a); // number console.log(a); // 0 未定義轉數字  var a = undefined; console.log(typeof a); // undefined console.log(a); // undefined a = Number(a); console.log(typeof a); // number console.log(a); // NaN  假設情況如下述：我們從CSS中擷取到一個字符串：200px，並且想把這像素加上 20px 此時要怎麼做？\nvar a = \u0026#34;200px\u0026#34;; a = Number(a); console.log(typeof a); // number console.log(a); // NaN 若直接使用 Number() 則會得不到我們想要的結果\n因為字串中有非數字 px 所以無法使用 Number() 做轉換\n parseInt()函數：將一個字符串中有效的內容取出來，並轉換為整數\nparseFloat()函數：將一個字符串中有效的內容取出來，並轉換為浮點數\nvar a = \u0026#34;200px\u0026#34;; a = parseInt(a); console.log(typeof a); // number console.log(a); // 200 由上述可知，藉由 parseInt() 成功擷取到 200 是數字型態\n parseInt() 函數與 parseFloat() 函數之特性解說：\n parseInt 只會由左往右取，當碰到無效內容就會停止  var a = \u0026#34;2022/02/28\u0026#34;; a = parseInt(a); console.log(typeof a); // number console.log(a); // 2022  var a = \u0026#34;47.22353px\u0026#34;; a = parseInt(a); console.log(typeof a); // number console.log(a); // 47 parseFloat 只會由左往右取，當碰到無效內容就會停止  var a = \u0026#34;2022/02/28\u0026#34;; a = parseFloat(a); console.log(typeof a); // number console.log(a); // 2022  var a = \u0026#34;47.22353px\u0026#34;; a = parseFloat(a); console.log(typeof a); // number console.log(a); // 47.22353 特別討論：用 parseInt() 轉換布林值  var a = true; a = parseInt(a); console.log(typeof a); // number console.log(a); // NaN // 如果 parseInt() 對非字符串做轉換時，會先將其轉換為字符串後再擷取 ","permalink":"https://KPW10452025.github.io/blog/js012/","tags":["javascript"],"title":"JS 課程012 強制類型轉換之 Number() 函數與 parseInt() 函數"},{"categories":["JavaScript課程"],"contents":"類型轉換：將其他的數據類型，轉換為 String、Number、Boolean\n本篇要介紹的是，強制類型轉換為字符串 String\n其方法有兩種：\n toString() 方法 String() 函數   方法一：調用被轉換數據類型的 toString() 方法 所謂調用 xxx 的 yyy 方法，即可視為 xxx.yyy()\n 將數字 Number 轉換為字符串 String  var a = 123; console.log(typeof a); // number console.log(a); // 123 a.toString(); console.log(typeof a); // number console.log(a); // 123 由上述可發現，單純使用.toString();並無法轉換原變數的類型\n.toString()有兩個基本特性：\n 此方法不會影響到原變量 此方法會將轉換的結果回傳，故需要一個變數來接收回傳值  var a = 123; console.log(typeof a); // number console.log(a); // 123 b = a.toString(); console.log(typeof b); // string console.log(b); // 123 // 可發現 b 已是字符串 String // 也可直接用 a 來接收回傳值 a.toString(); console.log(typeof a); // string console.log(a); // 123 //轉換成功  將布林值 Boolean 轉換為字符串 String  var a = true; console.log(typeof a); // boolean console.log(a) // true a = a.toString(); console.log(typeof a); // string console.log(a) // true //轉換成功  將空值 Null 轉換為字符串 String  var a = null; console.log(typeof a); // object console.log(a) // null a = a.toString(); // Uncaught TypeError: Cannot read properties of null (reading \u0026#39;toString\u0026#39;) // 系統報錯：null 中並沒有 .toString() 方法 // 轉換失敗  將未定義 Undefined 轉換為字符串 String  var a = undefined; console.log(typeof a); // undefined console.log(a) // undefined a = a.toString(); // Uncaught TypeError: Cannot read properties of undefined (reading \u0026#39;toString\u0026#39;) // 系統報錯：undefined 中並沒有 .toString() 方法 // 轉換失敗 由上面四個範例可知，.toSring() 可以成功轉換數字 Number、布林值 Boolean\n但由於空值 Null 和未定義 Undefined 中並沒有此方法，故轉換失敗 此時就要用到方法二：String()函數\n 方法二：調用 String() 函數 將被轉換數據，作為參數傳遞給函數\n.toString()一樣有兩個基本特性：\n 此方法不會影響到原變量 此方法會將轉換的結果回傳，故需要一個變數來接收回傳值   將數字 Number 轉換為字符串 String  var a = 123; console.log(typeof a); // number console.log(a); // 123 a = String(a); console.log(typeof a); // string 轉換成功 console.log(a); // 123  將布林值 Boolean 轉換為字符串 String  var a = true; console.log(typeof a); // boolean console.log(a); // true a = String(a); console.log(typeof a); // string 轉換成功 console.log(a); // true  將布空值 Null 轉換為字符串 String  var a = null; console.log(typeof a); // object console.log(a); // null a = String(a); console.log(typeof a); // string 轉換成功 console.log(a); // null  將未定義 Undefined 轉換為字符串 String  var a = undefined; console.log(typeof a); // undefined console.log(a); // undefined a = String(a); console.log(typeof a); // string 轉換成功 console.log(a); // undefined  ","permalink":"https://KPW10452025.github.io/blog/js011/","tags":["javascript"],"title":"JS 課程011 強制類型轉換之 toString() 方法與 String() 函數"},{"categories":["JavaScript課程"],"contents":"Null\nWhen we var a variable is null, it means it is empty.\nThere is nothing in the variable.\nvar a = null; console.log(a); // null We\u0026rsquo;ll get \u0026ldquo;object\u0026rdquo; when we use typeof operator to find the type of a.\nvar a = null; console.log(typeof a); // object  Undefined\nWhen we var a variable and didn\u0026rsquo;t declare a value to this variable, we\u0026rsquo;ll get an undefined variable.\nvar b; console.log(b); // undefined console.log(typeof b); // undefined  ","permalink":"https://KPW10452025.github.io/blog/js010/","tags":["javascript"],"title":"JS 課程010 Null \u0026 Undefined"},{"categories":["JavaScript課程"],"contents":"Boolean is used to make logical judgments.\nThere only have two kinds of Boolean: True and False.\nvar bool01 = true; var bool02 = false; console.log(bool01); // true console.log(typeof bool01); // boolean console.log(bool02); // false console.log(typeof bool02); // boolean  ","permalink":"https://KPW10452025.github.io/blog/js009/","tags":["javascript"],"title":"JS 課程009 Boolean 布林值"},{"categories":["JavaScript課程"],"contents":"We can use the typeof operator to find the data type of a JS variable.\nsyntax: typeof variable\nvar num01 = 123; var num02 = \u0026#34;123\u0026#34;; console.log(\u0026#34;num01 =\u0026#34;, num01); // num01 = 123 console.log(\u0026#34;type of num01 is a\u0026#34;, typeof num01); // type of num01 is a number console.log(\u0026#34;num02 =\u0026#34;, num02); // num02 = 123 console.log(\u0026#34;type of num02 is a\u0026#34;, typeof num02); // type of num02 is a string We can use Number.MAX_VALUE to show the largest number in JS.\nvar a = Number.MAX_VALUE; console.log(a); // 1.7976931348623157e+308 console.log(typeof a); // Number We also can use Number.MIN_VALUE to show the smallest number in JS.\nvar a = Number.MIN_VALUE; console.log(a); // 5e-324 console.log(typeof a); // Number What will it happen when we Number.MIN_VALUE * Number.MIN_VALUE ?\nWe will get a number called Infinity.\nBy using typeof operator, we\u0026rsquo;ll find the type of Infinity is a number.\nvar a = Number.MIN_VALUE * Number.MIN_VALUE; console.log(a); // Infinity console.log(typeof a); // number On the other hand, there has a number called -Infinity.\nvar a = -Infinity console.log(a); // -Infinity console.log(typeof a); // number JS is unable to accurately calculate float numbers.\nIf you want to do exact numerical operations, don\u0026rsquo;t use JS.\nvar n1 = 0.1; var n2 = 0.2; console.log(n1 + n2); // 0.30000000000000004 // The exact correct answer is 0.3  ","permalink":"https://KPW10452025.github.io/blog/js008/","tags":["javascript"],"title":"JS 課程008 Number 數字"},{"categories":["JavaScript課程"],"contents":"數據類型：數據類型指的就是字面量類型\n在 JS 中共有六種數據類型：\n一、String 字符串\n二、Number 數字\n三、Boolean 布爾值、布林值\n四、Null 空值\n五、Undefined 未定義\n六、Object 物件、對象\nString Number Boolean Null Undefined 前五種為基本數據類型\nObject 為引用數據類型\n String 字符串\n 在 JS 中使用字符串需要用引號匡起來  var str01 = \u0026#34;apple\u0026#34;; var str02 = 123; // 此時的 123 是數字 Number var str03 = \u0026#34;123\u0026#34;; // 此時的 123 是字符串 String  使用雙引號或是單引號皆可  var str01 = \u0026#34;apple\u0026#34;; var str02 = \u0026#39;apple\u0026#39;;  在字符串中可以用反斜槓 \\ 當作轉譯字符  var str01 = \u0026#34;Nike:\u0026#39;Just do it!\u0026#39;\u0026#34;; console.log(str01); // Nike:\u0026#39;Just do it!\u0026#39; var str02 = \u0026#34;Nike:\\\u0026#34;Just do it!\\\u0026#34;\u0026#34;; console.log(str02); // Nike:\u0026#34;Just do it!\u0026#34;  \\n 表示換行  var str01 = \u0026#34;Nice to meet you!\\nI\u0026#39;m Tom.\u0026#34;; console.log(str01); /* Nice to meet you! I\u0026#39;m Tom. */  \\t 表示製表符，相當於按一下 tab 鍵  var str01 = \u0026#34;Long\\tlong time ago!\u0026#34; console.log(str01); // Long long time ago!  ","permalink":"https://KPW10452025.github.io/blog/js007/","tags":["javascript"],"title":"JS 課程007 String 字符串"},{"categories":["JavaScript課程"],"contents":"在 JS 中所有可以自種命名的都可以稱為標示符。\n例如：變量名、函數名、屬性名\u0026hellip;等。\n命名規則：\n一、標示符中可以包含所有字母、數字、 _ 、 $ ，但不能使用 # 、 @ \u0026hellip;等底線和錢字符以外的符號。\n// 正確寫法 var apple = 10; var man01_age = 48; var car05_$ = 600000; // 不正確寫法 var banana# = 20; var cherry@ = 30; 二、標示符不能以數字開頭。\n// 不正確寫法 var 1house = 6000000; var 8girls = 800000; 三、標示符不能是 ES 中的關鍵字或保留字。\n// 不正確寫法 var while = 4.66; var if = 32; 四、標示符通常以駝峰命名法命名\n// 推薦方法 var manAge = 36; var womanAge = 32; // 不推薦寫法 var mAnagE = 36; var wOMaNAgE = 32;  ","permalink":"https://KPW10452025.github.io/blog/js006/","tags":["javascript"],"title":"JS 課程006 標示符"},{"categories":["JavaScript課程"],"contents":" literal 字面量 variable 變量   \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;JS005\u0026lt;/title\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; // In JS, we use \u0026#34;var\u0026#34; to declare a variable.  var a1; // But it only represents there have a variable named a.  console.log(a1) // After we execute the code, we get nothing.  // Variable a has no value.  a1 = 123; console.log(a1); // After we execute the code, we\u0026#39;ll get 123 in the console log page.  // We can write two codes together.  var a2 = 234; console.log(a2); // We can use variables and literals to make some description.  var student01_age = 13 console.log(student01_age) // There is a student01 and the ages of the student are 13.  \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  ","permalink":"https://KPW10452025.github.io/blog/js005/","tags":["javascript"],"title":"JS 課程005 字面量Literals \u0026 變量Variables"},{"categories":["JavaScript課程"],"contents":" Comments in JS  // one line comment 單行註解  /* multi-line comments 多行註解 a for apple b for ball c for cat */  Strictly case sensitive.\n嚴格區分大小寫 Separate each statement with a semicolon.\n每一條語句以英文分號區隔 Ignore multiple spaces and newlines, so you can flexibly use newlines and spaces for code formatting.\n會忽略多個空格和換行，所以可以靈活利用換行、空格進行代碼格式化   ","permalink":"https://KPW10452025.github.io/blog/js004/","tags":["javascript"],"title":"JS 課程004 JS basic syntax"},{"categories":["JavaScript課程"],"contents":"  attribute 屬性 execute 執行 practical application 實際應用 maintenance 維護 couple 偶合 quote 引用 caching mechanism 緩存機制    We can code the JS in the attributes of onclick.\nJS code will be executed when we clicking the button on the website.  \u0026lt;body\u0026gt; \u0026lt;button onclick=\u0026#34;alert(\u0026#39;Hello there!\u0026#39;)\u0026#34;\u0026gt;Click me!\u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; We can also code the JS in the a tag.\nJS code will be executed when we clicking the hyperlink.  \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;javascript:alert(\u0026#39;Look over there!\u0026#39;)\u0026#34;\u0026gt;Click me!\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; Here is a practical application for JS in a hyperlink.\nWhen we code an a tag and we don\u0026rsquo;t want it to connect any urls, we can use 【 javascript:; 】.  \u0026lt;body\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34;\u0026gt;Click me!\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; Although JS can be written in attributes, it is easy to couple attributes with structures.\nBecause maintenance is difficult, we don\u0026rsquo;t recommend.\nBy using the script tag to code JS in head tag is better than on the attributes.  \u0026lt;head\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; alert(\u0026#34;This is an alert!\u0026#34;) \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; The best way to code JS is creating a .js file.\nAnd using script tags and src in .html file to link the .js file.\nThe benefits of writing JS code in the .js file is we can quote this file to different .html file. In this way, we can also take advantage of the browser\u0026rsquo;s caching mechanism.  \u0026lt;head\u0026gt; \u0026lt;script src=\u0026#34;/example.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt;  ","permalink":"https://KPW10452025.github.io/blog/js003/","tags":["javascript"],"title":"JS 課程003 JS 代碼編寫位置"},{"categories":["JavaScript課程"],"contents":"\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;JS002\u0026lt;/title\u0026gt; \u0026lt;!-- JS 代碼需要邊寫道 script 標籤中 --\u0026gt; \u0026lt;!-- type=\u0026#34;text/javascript\u0026#34; 是默認值，寫不寫皆可 --\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; // 控制瀏覽器彈出一個警告  // alert(\u0026#34;This is my first JS code!\u0026#34;);  // alert()可以讓瀏覽器頁面彈出一個警告視窗  // 在右面中輸出一個內容  // document.write(\u0026#34;Hello World!\u0026#34;);  // document.write()可以向 body 輸出一個內容  // 像控制台日誌輸出一個內容  // console.log(\u0026#34;Hello World!\u0026#34;);  // console.log()可以向控制台輸出一個內容  // 控制台日誌在 檢查頁面（command + shift + C）的 console 選項裡面  alert(\u0026#34;This is my first JS code!\u0026#34;); document.write(\u0026#34;Hello World in web page!\u0026#34;); console.log(\u0026#34;Hello World in console log!\u0026#34;) // JS 語言運作是由上而下，所以上面三個指令也會依序作用  // 當頁面刷新時，在還沒點確定以關閉警告頁面時，Hello World in web page! 是不會出現的  // alert, document.write console.log 稱為「輸出語句」  // 「輸出語句」：類似 Python 中的 print() 可以用來做測試  \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  ","permalink":"https://KPW10452025.github.io/blog/js002/","tags":["javascript"],"title":"JS 課程002 JS HelloWord"},{"categories":["JavaScript課程"],"contents":" ECMAScript 是 JavaScript 標準，所以一般情況下這兩個詞是同一個意思。 但實際上 JavaScript 的含義要更大一些。 完整的 JavaScript 實現應該由以下三個部分構成：\n一、ECMAScript\n二、DOM 文檔對象模型：它提供一組對象，讓我們可以通過 JS 操作網頁。\n三、BOM 瀏覽器對象模型：它提供一組對象，讓我們可以通過 JS 操作瀏覽器。 JS 的特點：\n一、解釋型語言\n二、類似 和 的語法結構\n三、動態語言\n四、基於圓形的物件導向（面向對象）  ","permalink":"https://KPW10452025.github.io/blog/js001/","tags":["javascript"],"title":"JS 課程001 JavaScript 簡介"},{"categories":["大前端相關"],"contents":"  步驟一：開啟網頁「檢查」頁面\n windows 系統：\n按下 F12 開啟檢查頁面 MacOS 系統：\n按下 ⌘Command + Option + C    步驟二：開啟搜尋匡\n windows 系統：\n在檢查頁面，按下 CTRL + Shift + P MacOS 系統：\n在檢查頁面，按下 ⌘Command + Shift + P    步驟三：輸入 Capture Full Size Screenshot\n 輸入後按下 Enter 稍等片刻會彈出存儲視窗     ","permalink":"https://KPW10452025.github.io/blog/00webpage_full_screen_shot/","tags":["html"],"title":"擷取網站全畫面"},{"categories":["terminal語法相關"],"contents":"Here is some common used syntax in terminal on MacOS.   Create a new folder.\n創建新資料夾  mkdir folder_name   Delete a file. (This deletes the file permanently; use with caution.)\n刪除檔案  rm file_name   Delete a folder and its contents.\n刪除資料夾及其內容檔案  rm -R folder_name   Create a new file without any extension.\n創建一個新檔案  touch file_name   Display the name of files and subdirectories in the directory.\n顯示資料夾中所有檔案  ls   List detailed directory contents, including hidden files\n顯示資料夾中所有檔案（包含隱藏檔案）  ls -la   Clear the line before the cursor.\n清除光標前面已輸入的內容\nCtrl + U Clear the screen.\n清空頁面\nCtrl + L Kill whatever you\u0026rsquo;re running\n強制結束任何運行中的程式\nCtrl + C  ","permalink":"https://KPW10452025.github.io/blog/00mac_terminal_commands_cheat_sheet/","tags":["terminal"],"title":"MacOS 的 terminal 常用語法"},{"categories":["Git相關"],"contents":"「基本常用 Code」  git init 將一個資料夾初始化後，可以開始使用 git 版本管理 git log 查看先前詳細的 commit 記錄。 git log \u0026ndash;oneline 查看先前簡易的 commit 記錄。 git log \u0026ndash;graph 查看先前詳細的 commit 記錄，視覺化分支。 git reflog 查看全部的 commit 記錄，包含跳版本的紀錄。（reference 參考） git status 檢查本地端檔案異動狀態。 git status -s 檢查本地端檔案異動狀態。（簡易顯示） git add [檔案或資料夾] 將指定的檔案或資料夾，加入版本控制。 git add . 將全部的檔案或資料夾，加入版本控制。 git commit 提交（commit）目前的異動。  會進入提交頁面。 按 s 鍵，進入INSERT狀態，並輸入將要提交的文字備註內容。 輸入完備註內容後按 esc (鍵盤左上角)，退出編輯狀態，然後輸入 :wq (一定要先輸入冒號)。   git commit -m \u0026ldquo;提交說明內容\u0026rdquo; 提交（commit）目前的異動並透過 -m 參數設定摘要說明文字。 git add [檔案或資料夾] git commit \u0026ndash;amend \u0026ndash;no-edit 在不增加新 commit 版本的狀態下，把新的異動加到目前最新的版本中。 但是 commit 的 ID 會改變。 git reset [檔案或資料夾] 把檔案或資料夾從 staged 狀態返回 modified 狀態。 git reset \u0026ndash;hard head 把版本移動到 head 版本裡（最新版）   「回到過去版本」  git reset \u0026ndash;hard head~1 git reset \u0026ndash;hard head^ 把該資料夾所有的檔案版本，移動到上一個版 git reset \u0026ndash;hard head~2 git reset \u0026ndash;hard head^^ 把該資料夾所有的檔案版本，移動到上兩個版 git reset \u0026ndash;hard [版本號碼] 把該資料夾所有的檔案版本，直接回到指定編號的版本   「回到未來版本」 通常會用到 git reflog 查詢 commit ID 然後用 git reset \u0026ndash;hard [版本號碼] 到達該版本 或是 git reset \u0026ndash;hard head@{數字} 到達該版本 「將『單個』檔案或資料夾，做版本變更」 git checkout [版本編號] \u0026ndash; [檔案或資料夾]\n 「建立分支」  git branch 查看目前所有的分支。 查看目前指針所處位置。 git branch [新分支名稱] 建立新分支。此時枝針並沒有移動該分支。 git checkout [已存在分支名稱] 將指針移動到該分支。 git checkout -b [新分支名稱] 建立新分支。並將指針移動到新分支。 git checkout master 將指針移動到 master。   「刪除分支」  git branch -d [分支名稱] 刪除該分支。 附註，當指針處於欲刪除的分支上時，系統會顯示無法刪除。   「主分合併」  git merge \u0026ndash;no-ff -m \u0026ldquo;提交說明內容\u0026rdquo; [分支名稱] 將當前分支與稱作[分支名稱]的分支代碼合並（[分支名稱]代碼合並到當前分支），並且顯示合並細節，具體表現在提交線路圖會出現交叉線。 git merge [分支名稱] 將當前分支與稱作[分支名稱]的分支代碼合並（[分支名稱]代碼合並到當前分支）。   「合併衝突」  conflict 衝突 當合併出現衝突時，系統會出現： CONFLICT (content): Merge conflict in [檔案或資料夾名稱] Automatic merge failed; fix conflicts and then commit the result. 此時系統會在被合併檔案出現許多提示文字要使用者做修改。 修改完後打上指令： git commit -am \u0026ldquo;提交說明內容\u0026rdquo; 即可排除衝突並合併  ","permalink":"https://KPW10452025.github.io/blog/00git_code/","tags":["git"],"title":"Git 版本控制常用語法"},{"categories":["Python相關"],"contents":"虛擬環境可以在任何資料夾下建立，並且同一個資料夾可以建立多個虛擬環境。  [ 建立虛擬環境 ]\n把 terminal 位置 cd 到想建立虛擬環境的專案資料夾。\n在 terminal 輸入 virtualenv 虛擬環境名稱。\nvirtualenv testvenv 這樣會建立一個名為 testvenv 的虛擬環境。\n專案資料夾會出現一個 testvenv 的資料夾。\n [ 啟動虛擬環境 ]\n在 terminal 輸入 source 虛擬環境名稱/bin/activate\nsource testvenv/bin/activate 這樣會啟動方才建立的 testvenv 虛擬環境。\n [ 關閉虛擬環境 ]\n在 terminal 輸入 deactivate\ndeactivate  [ 刪除虛擬環境 ]\n在專案資料夾裡找到和虛擬環境依樣名稱的資料夾，刪除這個資料夾就能刪除此虛擬環境。\n本篇的說明例子就是刪除名為 testvenv 的資料夾即可。\n [ 導出安裝模組 model ]\n在 terminal 輸入 pip list 可以看目前的環境已安裝的模組。\n在 terminal 輸入 pip freeze \u0026gt; 檔案名稱.txt 可以把目前的環境已安裝的模組導出至此 txt 檔案。\npip freeze \u0026gt; requirements.txt 在 terminal 輸入 cat 導出檔案名稱.txt 可以觀看此 txt 黨的內容。\ncat requirements.txt  [ 導入安裝模組 ]\n啟動虛擬環境後，在 terminal 輸入 pip install -r 檔案名稱.txt\npip install -r requirements.txt ","permalink":"https://KPW10452025.github.io/blog/00python_virtualenv/","tags":["python","virtualenv"],"title":"Python 虛擬環境 virtualenv"},{"categories":["大前端相關"],"contents":"   前端核心基礎階段\n 網頁頁面技術：HTML 網頁頁面技術：CSS 網頁交互技術：JavaScript 網頁交互技術：Dom 網頁交互技術：Bom   前端核心高級階段\n 網頁介面新技術：HTML5(語意化標籤、本地儲存、音頻視頻等) 網頁介面技術：CSS3(過度、動畫等) 移動端開發：移動端特性、適配等 前端樣式庫：Bootstrap 前端繪圖技術：Canvas 快速簡介圖表可視化庫：Echarts(折線圖、長條圖、餅狀圖、組合圖、綜合圖) 流行圖表可視化庫：D3 使用JS函數庫：JQuery 移動端類JQuery庫：Zepto 版本控制工具1：VSN 版本控制工具2：GIT \u0026amp; GITHUB   ＪＳ高級\n JS作用域及作用域鏈 JS原型及原型鏈 JS閉包 JS異步、事件循環機制 JS繼承 節流、防抖 深層複製、淺層複製 ES6新特性 ES7新特性 ES8~ES11新特性   ＪＳ後台技術階段\n 強大的後臺JS：Node.js 高效的非關係行數據庫：MongoDB 簡潔的MongoDB操作者Mongoose 後台Web開發框架1：Express 後台Web開發框架2：Koa 後台模板引琴：EJS 即時通信聊天庫：Socket.io 網路通信協議：http、https 通信數據加密：MD5、jsonwebtoken、base64   前後端交互階段\n AJAX 新型AJAX請求方式：fetch 前後台AJAX請求庫：axios REST API 跨域全面解決方案 Mock後台數據庫接口：Mock.js、EasyMock 接口調適神器：PostMan 基於promise封包原生AJAX axios源碼分析 基於promise現實axios封裝及二次迭代   工程化階段\n 模塊化規範1：Comman.js 模塊化規範2：ES6 模塊化規範3：AMD 模塊化規範4：CMD 構建工具1：Grunt 構建工具2：Gulp 構建工具3：Webpack4 構建工具4：Webpack5新特性   前端新型WEB框架階段\n Google出品MVVM庫：Angular Facebook出品組建化庫：React React路由插件庫：React-Router React應用狀態管理庫：Redux React PC端UI組建庫：Ant Design React移動端UI組建庫：Antd-Mobile React服務器端渲染技術 React實戰項目：矽谷登入系統 MVVM庫：Vue Vue路由庫：Vue-Router Vue狀態管理庫：Vuex Vue PC端UI組建庫：Element-UI Vue移動端UI組建庫：Vant-UI Vue服務器渲染端 Vue實戰項目：矽谷商城 Vue實戰項目：矽谷後台管理系統 項目部署上線：雲端服務器部署 Nginx附載均衡、反向代理 Vue+Echars圖表 Vue+Ts項目   跨平台開發階段\n 微信小程序開發 微信小程序框架：mpvue 微信小程序框架：UniApp 微信小程序項目：矽谷書城項目、矽谷週刊 微信小程序項目：矽谷雲音樂 微信公眾號開發 跨平台移動應用開發框架：React Native 跨平台開發框架：MUI H5 Hybrid移動端混合開發框架：ionic   底層原理實現\n 自定義promise 自定義axios 自定義PubSub 自定義Eventbus 自定義React、Vue聯手架 自定義實現lodash方法  ","permalink":"https://KPW10452025.github.io/blog/00frond_end_learning/","tags":["html","css","javascript"],"title":"大前端學習"}]